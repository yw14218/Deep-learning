{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“08_RL.ipynb”的副本","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/08_RL.ipynb","timestamp":1616107810805}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"2gPhGQSZ1era"},"source":["# Deep Reinforcement Learning: An Introduction\n","\n","In this tutorial, we will enter the world of Deep Reinforcement Learning (DRL). In particular, we will first familiarize ourselves with some basic concepts of Reinforcement Learning (RL), then we will implement a classical tabular Q-learning method for the classic [Frozen Lake](https://gym.openai.com/envs/FrozenLake-v0/) puzzle and finally, implement a Deep Q-learning approach for the [CartPole](https://gym.openai.com/envs/CartPole-v1/) problem.\n","\n","\n","> \n","\n","\n","\n","![alt text](https://media2.giphy.com/media/46ib09ZL1SdWuREnj3/giphy.gif?cid=3640f6095c6e92762f3446634d90bc65) ![alt text](https://media0.giphy.com/media/d9QiBcfzg64Io/200w.webp?cid=3640f6095c6e93e92f30655873731752)![alt text](https://i.gifer.com/GpAY.gif)\n","\n","The gifs above, show the results obtained by [Deepmind](https://arxiv.org/pdf/1312.5602v1.pdf) in one of their latest papers. They successfully trained an RL agent using deep Q-learning to play classical Atari arcade games. Let's see now how they did it.\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wmpPzxlbwvxI"},"source":["# Q-Learning \n","\n","This family of RL methods try to learn an approximator of the action-value functions $Q(s,a)$  based on the [Bellman equation](https://en.wikipedia.org/wiki/Bellman_equation), such that the update using a classical [gradient descent ](https://en.wikipedia.org/wiki/Gradient_descent) formulation is given by:\n","$$Q\\left(s,a\\right)=Q\\left(s,a\\right)+ \\alpha \\left(r+\\gamma \\max _{a} Q\\left(s_{t+1},a\\right)-Q\\left(s,a\\right)\\right).$$\n","Where $\\alpha$ is the step size. \n"," Q-Learning updates the estimated reward at each time step and  uses the old estimate $ \\max _{a}Q\\left(s_{t+1},a\\right)$ to update the new ones. In a more algorithmic way, the Q-Learning process is the following:\n","\n","\n","1.   Initialize Q-values at random $Q\\left(s,a\\right)$.\n","2. Forever or until learning is stopped do:\n","> 1.  Observe state $s$.\n","> 2.   Take action $a$ according to your policy, e.g., $\\epsilon$-greedy.\n","> 3.   Observe reward $r$ and new state $s_{t+1}$.\n","> 4. Based on your actual estimates, compute $\\max _{a}Q\\left(s_{t+1},a\\right)$.\n","> 5. Update your current estimate for  $Q\\left(s,a\\right)$:\n","$$Q\\left(s,a\\right)=Q\\left(s,a\\right)+ \\alpha \\left(r+\\gamma \\max _{a} Q\\left(s_{t+1},a\\right)-Q\\left(s,a\\right)\\right).$$\n","\n","Okay, now that we are familiar with Q-Learning lets jump to a real implementation of it.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"p_9McSwZh5sT"},"source":["\n","## Tabular Q-Learning with Frozen Lake\n","In this section we will teach an agent how to play  the [Frozen lake](https://gym.openai.com/envs/FrozenLake-v0/) game using a classical tabular Q-learning. Brace yourselves, winter is coming! \n","\n","![alt text](https://raw.githubusercontent.com/simoninithomas/Deep_reinforcement_learning_Course/1ee37cfc3130057f828f19b3cee6066d41c1eeb4/Q%20learning/FrozenLake/frozenlake.png)\n","\n","Winter has arrived and you and your friends were tossing around a frisbee at the park when you made a wild throw that left the frisbee out in the middle of the lake. The water is mostly frozen, but there are a few holes where the ice has melted. If you step into one of those holes, you'll fall into the freezing water. At this time, there's an international frisbee shortage, so you must navigate across the lake and retrieve the disc. However, the ice is slippery, so you won't always move in the direction you intend.\n","The goal of this game is to go from the starting state (S) to the goal state (G) by walking only on frozen tiles (F) and avoid holes (H). However, the ice is slippery (!!), so you won't always move in the direction you intend (stochastic environment), i.e., there is a probability $p$ that you move in the direction selected and a probability $(1-p)$ that given the slippery ice, you move to a random position near position. Specifically, let's say you select the action UP, you have a probability of 1/3 of actually going UP, 1/3 of going RIGHT and 1/3 of going LEFT. Similarly, if you select LEFT, you have a probability of 1/3 of actually going LEFT, 1/3 of going UP and 1/3 of going DOWN.\n","\n","The lake is represented by a 4x4 grid and the location where the frisbee has landed (G) as well as the holes (H) is always the same for every new game. The game is restarted every time you have successfully recovered the frisbee or you have fallen into the cold waters. A reward of +1 is given every time you recover the frisbee and 0 other way.\n"]},{"cell_type":"markdown","metadata":{"id":"nNrutC72jZRZ"},"source":["**Step 0: Import the needed libraries:**\n","\n","We will be using 3 libraries:\n","\n","* Numpy for our Qtable.\n","* OpenAI Gym for our FrozenLake Environment\n","* Random to generate random numbers\n","\n"]},{"cell_type":"code","metadata":{"id":"Q0OxrnpgjyFh"},"source":["from IPython.display import HTML\n","import numpy as np\n","import gym\n","import random"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"p-Nx8PYnj4I5"},"source":["**Environment creation:**\n","\n","OpenAi is  a library composed of many environments that we can use to train our agents, in our case we choose to use the Frozen Lake."]},{"cell_type":"code","metadata":{"id":"DWgurerLkNLe"},"source":["env = gym.make(\"FrozenLake-v0\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BeaPjILgkS7Z"},"source":["**Q-table**\n","\n"," Now, we'll create our Q-table. The goal of the Q-table is to store the estimates $Q\\left(s,a\\right)$ and retrieve them when necessary. In this game the states are represented by each of the 16 grid positions being 0 the starting position and 16 the goal position and the actions are 4: left, right, up and down. Our Q-table will have then $16 \\times 4$ positions, where the value of the first column of the first row represents the expected return of being in position 0 and taking left.\n"," \n","The number of rows (states) and columns (actions) the table will have can also be obtained using the values action_size and the state_size from the OpenAI Gym library: *env.action_space.n* and* env.observation_space.n*.\n"," \n","We initialize the table to 0."]},{"cell_type":"code","metadata":{"id":"eintO6cYk5qN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615939108419,"user_tz":0,"elapsed":824,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"bf9741ba-9f9a-4c47-ac68-8667f05a6d58"},"source":["action_size = env.action_space.n\n","state_size = env.observation_space.n\n","qtable = np.zeros((state_size, action_size))\n","print(qtable)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"G06GlU14k_JG"},"source":["**Hyperparameters**\n","\n","Following, we specify the hyperparameters:\n"]},{"cell_type":"code","metadata":{"id":"SYWdb_rHlFzq"},"source":["total_episodes = 25000        # Total episodes\n","learning_rate = 0.8           # Learning rate (alpha in the previous formulation)\n","max_steps = 99                # Max steps per episode\n","gamma = 0.95                  # Discounting rate"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NVb-8n8Jlkhs"},"source":["At first, we don't know how to interact with the environment (Q-table values set to 0), so we start exploring it by taking a random action with probability $\\epsilon=1$, capturing the rewards obtained and updating the Q-values of the table accordingly. As time passes by, we start knowing more and more the environment, so we reduce (decay_rate) the probability of taking a random action and we start exploiting our knowledge, we choose the action that leads us to the highest reward, i.e., the one with the highest Q-value."]},{"cell_type":"code","metadata":{"id":"rXq90uCMllKE"},"source":["# Exploration parameters\n","epsilon = 1.0                 # Exploration rate\n","max_epsilon = 1.0             # Exploration probability at start\n","min_epsilon = 0.01            # Minimum exploration probability \n","decay_rate = 0.005             # Exponential decay rate for exploration prob"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mVu4B3F2lLl8"},"source":["**Q-Learning**\n","\n","Now we implement the Q-Learning algorithm: \n","> 1.  Observe state $s$.\n","> 2.   Choose a random value $v$ between 0 and 1.\n","> 3. If $v<\\epsilon$, we choose a random action, otherwise we select the action with maximum $Q(s,a)$.\n","> 3.   Observe reward $r$ and new state $s_{t+1}$.\n","> 4. Based on your previous estimates, compute $\\max _{a}Q\\left(s_{t+1},a\\right)$.\n","> 5. Update your current estimates for  $Q\\left(s,a\\right)$:\n","$$Q\\left(s,a\\right)=Q\\left(s,a\\right)+ \\alpha \\left(r+\\gamma \\max _{a} Q\\left(s_{t+1},a\\right)-Q\\left(s,a\\right)\\right).$$\n"]},{"cell_type":"code","metadata":{"id":"eYbqMpg-liRd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615939136593,"user_tz":0,"elapsed":20301,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"f7cd2fb2-20d8-487d-c378-1a4e97dabb20"},"source":["# List of rewards\n","rewards = []\n","\n","for episode in range(total_episodes):\n","    # Reset the environment\n","    state = env.reset()\n","    step = 0\n","    done = False\n","    total_rewards = 0\n","    \n","    for step in range(max_steps):\n","        # 3. Choose an action a in the current world state (s)\n","        ## First we randomize a number\n","        exp_exp_tradeoff = random.uniform(0, 1)\n","        \n","        ## If this number > greater than epsilon --> exploitation (taking the biggest Q value for this state)\n","        if exp_exp_tradeoff > epsilon:\n","            action = np.argmax(qtable[state,:])\n","\n","        # Else doing a random choice --> exploration\n","        else:\n","            action = env.action_space.sample()\n","\n","        # Take the action (a) and observe the outcome state(s') and reward (r)\n","        new_state, reward, done, info = env.step(action)\n","\n","        # Update Q(s,a):= Q(s,a) + lr [R(s,a) + gamma * max Q(s',a') - Q(s,a)]\n","        # qtable[new_state,:] : all the actions we can take from new state\n","        qtable[state, action] = qtable[state, action] + learning_rate * (reward + gamma * np.max(qtable[new_state, :]) - qtable[state, action])\n","        \n","        total_rewards += reward\n","        \n","        # Our new state is state\n","        state = new_state\n","        \n","        # If done (if we're dead) : finish episode\n","        if done == True: \n","            break\n","        \n","    # Reduce epsilon (because we need less and less exploration)\n","    epsilon = min_epsilon + (max_epsilon - min_epsilon)*np.exp(-decay_rate*episode) \n","    rewards.append(total_rewards)\n","\n","print (\"Score over time: \" +  str(sum(rewards)/total_episodes))\n","print(qtable)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Score over time: 0.48684\n","[[1.39124819e-01 1.01735457e-01 7.34987800e-02 3.75791448e-02]\n"," [2.87816870e-04 2.42413885e-02 8.87732381e-04 9.21525017e-02]\n"," [6.60480532e-03 1.84266920e-02 2.01071938e-02 3.33772707e-02]\n"," [4.57519649e-03 2.45008848e-03 2.09666958e-02 3.84418039e-02]\n"," [3.19277194e-01 3.44939871e-03 4.91964503e-02 1.58745596e-02]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [1.16687579e-01 2.12514371e-05 1.67022345e-05 9.31319227e-05]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [5.06476717e-02 4.13914330e-02 8.67223257e-02 5.61994652e-01]\n"," [1.19388812e-02 3.04240134e-01 1.56870316e-03 2.01092332e-02]\n"," [6.98009437e-01 5.59118701e-03 6.38690935e-02 1.28022463e-02]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [7.07176244e-02 5.82404296e-03 3.85593714e-01 5.56445286e-03]\n"," [2.65782204e-01 9.68886930e-01 2.22754552e-01 2.53078555e-01]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zvcHhVx5lrWZ"},"source":["**Use our Q-table to play FrozenLake!**\n","\n","After 25000 episodes, our Q-table can be used as a \"cheatsheet\" to play FrozenLake\"!\n","  \n","By running this cell, you can see our agent playing FrozenLake:"]},{"cell_type":"code","metadata":{"id":"Hz65tCGSlzSc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615939168503,"user_tz":0,"elapsed":452,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"6507f201-3d5c-4511-94b1-98873280092e"},"source":["env.reset()\n","\n","state = env.reset()\n","step = 0\n","done = False\n","print(\"****************************************************\")\n","env.render()\n","for step in range(max_steps):\n","\n","    # Take the action (index) that have the maximum expected future reward given that state\n","    action = np.argmax(qtable[state,:])\n","\n","    new_state, reward, done, info = env.step(action)\n","\n","    env.render()\n","\n","    # We print the current step.\n","    print(\"Number of steps\", step)\n","    if done:\n","      break\n","    state = new_state\n","env.close()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["****************************************************\n","\n","\u001b[41mS\u001b[0mFFF\n","FHFH\n","FFFH\n","HFFG\n","  (Left)\n","\u001b[41mS\u001b[0mFFF\n","FHFH\n","FFFH\n","HFFG\n","Number of steps 0\n","  (Left)\n","\u001b[41mS\u001b[0mFFF\n","FHFH\n","FFFH\n","HFFG\n","Number of steps 1\n","  (Left)\n","SFFF\n","\u001b[41mF\u001b[0mHFH\n","FFFH\n","HFFG\n","Number of steps 2\n","  (Left)\n","SFFF\n","FHFH\n","\u001b[41mF\u001b[0mFFH\n","HFFG\n","Number of steps 3\n","  (Up)\n","SFFF\n","FHFH\n","F\u001b[41mF\u001b[0mFH\n","HFFG\n","Number of steps 4\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","H\u001b[41mF\u001b[0mFG\n","Number of steps 5\n","  (Right)\n","SFFF\n","FHFH\n","FFFH\n","HF\u001b[41mF\u001b[0mG\n","Number of steps 6\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","HF\u001b[41mF\u001b[0mG\n","Number of steps 7\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","H\u001b[41mF\u001b[0mFG\n","Number of steps 8\n","  (Right)\n","SFFF\n","FHFH\n","F\u001b[41mF\u001b[0mFH\n","HFFG\n","Number of steps 9\n","  (Down)\n","SFFF\n","FHFH\n","FF\u001b[41mF\u001b[0mH\n","HFFG\n","Number of steps 10\n","  (Left)\n","SFFF\n","FHFH\n","F\u001b[41mF\u001b[0mFH\n","HFFG\n","Number of steps 11\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","H\u001b[41mF\u001b[0mFG\n","Number of steps 12\n","  (Right)\n","SFFF\n","FHFH\n","FFFH\n","HF\u001b[41mF\u001b[0mG\n","Number of steps 13\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","HFF\u001b[41mG\u001b[0m\n","Number of steps 14\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iSroWmlroYiC"},"source":["Let’s see how many times our agent finds the frisbee 🎉\n","\n","To this end we will print the last step of the game."]},{"cell_type":"code","metadata":{"id":"W3BUEqOzocSl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615939216672,"user_tz":0,"elapsed":433,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"179d05c3-6103-4b26-b0c1-13298525090c"},"source":["games=5\n","step = 0\n","done = False\n","print(\"****************************************************\")\n","for game in range(games):\n","  env.reset()\n","  state = env.reset()\n","  for step in range(max_steps):\n","\n","      # Take the action (index) that have the maximum expected future reward given that state\n","      action = np.argmax(qtable[state,:])\n","\n","      new_state, reward, done, info = env.step(action)\n","\n","      if done:\n","        # Here, we decide to only print the last state (to see if our agent is on the goal or fall into a hole)\n","        env.render()\n","  \n","        # We print the number of step it took.\n","        print(\"Number of steps\", step)\n","        done= False\n","        break\n","      state = new_state\n","  env.close()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["****************************************************\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","HFF\u001b[41mG\u001b[0m\n","Number of steps 10\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","HFF\u001b[41mG\u001b[0m\n","Number of steps 13\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","HFF\u001b[41mG\u001b[0m\n","Number of steps 38\n","  (Down)\n","SFFF\n","FHFH\n","FFFH\n","HFF\u001b[41mG\u001b[0m\n","Number of steps 42\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kfLNsIPtQevL","executionInfo":{"status":"ok","timestamp":1615939227108,"user_tz":0,"elapsed":5423,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"800e029a-7b28-4635-a18b-9668b94090cb"},"source":["games=10000\n","step = 0\n","total_rewards = 0\n","done = False\n","for game in range(games):\n","  env.reset()\n","  state = env.reset()\n","  for step in range(max_steps):\n","\n","      # Take the action (index) that have the maximum expected future reward given that state\n","      action = np.argmax(qtable[state,:])\n","\n","      new_state, reward, done, info = env.step(action)\n","\n","      if done:\n","        total_rewards += reward\n","        done= False\n","        break\n","      state = new_state\n","  env.close()\n","success = total_rewards / games\n","print(\"Ratio of sucessfully finished episodes is {:f}\".format(success))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Ratio of sucessfully finished episodes is 0.738300\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_d3L77JNpUvy"},"source":["## CartPole\n","\n","That wasn't so hard! How about trying to balance a pole so it does not fall? In this section we will address the [CartPole](https://gym.openai.com/envs/CartPole-v1/) problem, let's get to it!\n","\n","![texto alternativo](https://keon.github.io/images/deep-q-learning/animation.gif)\n","\n","As before we will use Q-learning to train our agent, so let's start by constructing our Q-table. We first need to find out the number of columns and rows of it. By checking the environment specifications of [OpenAi](https://github.com/openai/gym/blob/master/gym/envs/classic_control/cartpole.py), we see that the actions are left and right, so we need two columns for the actions. On the other hand, the state information is given by:\n","\n","        Num\tObservation                 Min         Max\n","        0\tCart Position             -4.8            4.8\n","        1\tCart Velocity             -Inf            Inf\n","        2\tPole Angle                 -24 deg        24 deg\n","        3\tPole Velocity At Tip      -Inf            Inf\n","      \n","The cart position goes from -4.8 to 4.8 with a resolution of 0.01, which means $\\frac{4.8 \\times 2}{0.01}=960$ possible carts positions, while the cart velocity goes from $-\\infty$ to $\\infty$!. How we are going to construct a table with $\\infty$ rows?\n"," \n","Do not panic! That is when deep learning steps up and takes over the stage. As you have already seen the use of Deep Neural Networks as general function approximators have been proven to work very well in a wide range of areas, reinforcement learning is not an exception. In this case we will use the NNs as function approximation between the mapping of states to actions, so for every input state, we want the NNs to output an approximation of the $Q\\left(s,a\\right)$.\n","\n","![alt text](https://proxy.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn-images-1.medium.com%2Fmax%2F1318%2F1*Gh5PS4R_A5drl5ebd_gNrg%402x.png&f=1)\n","\n","In this particular scenario, the input layer will have the same number of inputs as environment parameters, 4, and the output layer will have the same number of outputs as actions, in this case 2. \n","\n","**Reward:** A reward of +1 is provided for every timestep that the pole remains upright. The episode ends when the pole is more than 15 degrees from vertical.\n"]},{"cell_type":"markdown","metadata":{"id":"wHi3LRul2b6h"},"source":["\n","**Step 0: Import the needed libraries**\n","\n","We start by importing the needed libraries:\n","We will be using 3 libraries:\n","* Keras: for our DNNs.\n","* OpenAI Gym: for our CartPole Environment\n","* Random: to generate random numbers.\n","* Collections: Collection will be use to create a memory buffer to store the tuples $\\left(S_t, A_t, R_t,S_{t+1}\\right)$ of transactions. \n","\n","The idea behind the use of a memory buffer is that most optimization algorithms, including gradient descent, assume that the samples used in an update step are independent and identically distributed. Clearly in the defined environment that is not the case, however, by sampling uniformly the memory buffer with a high number of samples the correlation between contiguous samples is broken and less likely to be correlated samples are used to update the network's weights, leading to a stable optimization of the action-parameter selection.\n"]},{"cell_type":"code","metadata":{"id":"yO4Qbc942zPJ"},"source":["import random\n","import gym\n","import numpy as np\n","from collections import deque\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.optimizers import Adam\n","import os"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7KDyanK23SQH"},"source":["**The Agent**\n","\n","Let's start by coding a general DQ-Learning agent. The state and action size are passed as parameters and we configure a replay buffer to have capacity to store 2000 experienced transitions."]},{"cell_type":"code","metadata":{"id":"18b_7T9K-V_a"},"source":[" class DQNAgent:\n","    def __init__(self, state_size, action_size):\n","        self.state_size = state_size\n","        self.action_size = action_size\n","        self.memory = deque(maxlen=2000)\n","        self.gamma = 0.95    # discount rate\n","        self.epsilon = 1.0  # exploration rate\n","        self.epsilon_min = 0.01\n","        self.epsilon_decay = 0.995\n","        self.learning_rate = 0.001\n","        self.model = self._build_model()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Xws00CC6Ae7K"},"source":["Now we address the DNNs; we are going to use two fully connected layers of 24 neurons each and as an optimizer we select Adam."]},{"cell_type":"code","metadata":{"id":"UUxh0JOWAtPT"},"source":["    def _build_model(self):\n","        # Neural Net for Deep-Q learning Model\n","        model = Sequential()\n","        model.add(Dense(24, input_dim=self.state_size, activation='relu'))\n","        model.add(Dense(24, activation='relu'))\n","        model.add(Dense(self.action_size, activation='linear'))\n","        model.compile(loss='mse',\n","                      optimizer=Adam(lr=self.learning_rate))\n","        return model"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yA4DQkqcBQ84"},"source":["Now define the method to store the transitions into the memory buffer.\n","The parameter done is a boolean returned true when the pole has fallen. "]},{"cell_type":"code","metadata":{"id":"9qv7a_raBQGr"},"source":["    def remember(self, state, action, reward, next_state, done):\n","          self.memory.append((state, action, reward, next_state, done))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G9X-HisYBc9m"},"source":["Again, we implement and $\\epsilon$-greedy policy."]},{"cell_type":"code","metadata":{"id":"AXJoxwi2Bmss"},"source":["     def act(self, state):\n","            if np.random.rand() <= self.epsilon:\n","                return random.randrange(self.action_size)\n","            act_values = self.model.predict(state)\n","            return np.argmax(act_values[0]) # returns action"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9bmi6bk5Bv7E"},"source":["Then comes the implementation of the Q-Learning method:\n","\n","\n","\n","1.   We obtain the samples to train the DNN from the replay buffer.\n","2.  We compute $target=r+\\gamma \\max _{a} Q\\left(s_{t+1},a\\right)$, by doing a forward pass using next_state value.\n","3. We do a forward pass through the network to obtain the $Q\\left(s,a\\right)$ for all the possible actions.\n","4. In order to just update the parameter of the action taken, we copy target to the value of the $Q\\left(s,a\\right)$ of the actual $a$ taken.\n","5. We update the parameters of the network using MSE as loss function.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"nYgDWxUmBu8n"},"source":["def replay(self, batch_size):\n","    minibatch = random.sample(self.memory, batch_size)\n","    ### This code below generates batches of states, actions, rewards\n","    ### next states out of the sampled minibatch\n","    state_b = np.squeeze(np.array(list(map(lambda x: x[0], minibatch))))\n","    action_b = np.squeeze(np.array(list(map(lambda x: x[1], minibatch))))\n","    reward_b = np.squeeze(np.array(list(map(lambda x: x[2], minibatch))))\n","    next_state_b = np.squeeze(np.array(list(map(lambda x: x[3], minibatch))))\n","    done_b = np.squeeze(np.array(list(map(lambda x: x[4], minibatch))))\n","  \n","    target = (reward_b + self.gamma *\n","                      np.amax(self.model.predict(next_state_b), 1))\n","    target[done_b==1] = reward_b[done_b==1]\n","    target_f = self.model.predict(state_b)\n","    for k in range(target_f.shape[0]):\n","      target_f[k][action_b[k]] = target[k]\n","    self.model.train_on_batch(state_b, target_f)\n","    if self.epsilon > self.epsilon_min:\n","        self.epsilon *= self.epsilon_decay\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t2E-OJlAFraT"},"source":["Now we define the operations to load and save the models."]},{"cell_type":"code","metadata":{"id":"BeE1SshPFqrn"},"source":["def load(self, name):\n","  self.model.load_weights(name)\n","def save(self, name):\n","  self.model.save_weights(name)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M4J6L3xbF10Y"},"source":["Colab does not recognize all the previous code parts defined under the same class, to this end we run everything this time altogether. "]},{"cell_type":"code","metadata":{"id":"CFSDV2qAFYRk"},"source":["class DQNAgent:\n","  def __init__(self, state_size, action_size):\n","    self.state_size = state_size\n","    self.action_size = action_size\n","    self.memory = deque(maxlen=20000)\n","    self.gamma = 0.95    # discount rate\n","    self.epsilon = 1.0  # exploration rate\n","    self.epsilon_min = 0.01\n","    self.epsilon_decay = 0.995\n","    self.learning_rate = 0.001\n","    self.model = self._build_model()\n","\n","  def _build_model(self):\n","    # Neural Net for Deep-Q learning Model\n","    model = Sequential()\n","    model.add(Dense(24, input_dim=self.state_size, activation='relu'))\n","    model.add(Dense(48, activation='relu'))\n","    model.add(Dense(self.action_size, activation='linear'))\n","    model.compile(loss='mse',\n","                  optimizer=Adam(lr=self.learning_rate))\n","    return model\n","\n","  def remember(self, state, action, reward, next_state, done):\n","    self.memory.append((state, action, reward, next_state, done))\n","\n","  def act(self, state):# We implement the epsilon-greedy policy\n","    if np.random.rand() <= self.epsilon:\n","        return random.randrange(self.action_size)\n","    act_values = self.model.predict(state)\n","    return np.argmax(act_values[0]) # returns action\n","  \n","  def exploit(self, state): # When we test the agent we dont want it to explore anymore, but to exploit what it has learnt\n","    act_values = self.model.predict(state)\n","    return np.argmax(act_values[0]) \n","\n","  def replay(self, batch_size):\n","    minibatch = random.sample(self.memory, batch_size)\n","    \n","    state_b = np.squeeze(np.array(list(map(lambda x: x[0], minibatch))))\n","    action_b = np.squeeze(np.array(list(map(lambda x: x[1], minibatch))))\n","    reward_b = np.squeeze(np.array(list(map(lambda x: x[2], minibatch))))\n","    next_state_b = np.squeeze(np.array(list(map(lambda x: x[3], minibatch))))\n","    done_b = np.squeeze(np.array(list(map(lambda x: x[4], minibatch))))\n","    target = (reward_b + self.gamma *\n","                      np.amax(self.model.predict(next_state_b), 1))\n","    target[done_b==1] = reward_b[done_b==1]\n","    target_f = self.model.predict(state_b)\n","    for k in range(target_f.shape[0]):\n","      target_f[k][action_b[k]] = target[k]\n","    self.model.train_on_batch(state_b, target_f)\n","    if self.epsilon > self.epsilon_min:\n","        self.epsilon *= self.epsilon_decay\n","  def load(self, name):\n","    self.model.load_weights(name)\n","  def save(self, name):\n","    self.model.save_weights(name)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t6YDZhTIDjiC"},"source":["**Main**\n","\n","Following we implement the training of the agent. (Warning: it takes a while)"]},{"cell_type":"code","metadata":{"id":"FpM1nbUCJVbQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616017516666,"user_tz":0,"elapsed":987,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"00f9b7a2-e02e-4942-fb87-8113eeb8beff"},"source":["EPISODES = 200\n","env = gym.make('CartPole-v0')\n","state_size = env.observation_space.shape[0]\n","action_size = env.action_space.n\n","action_size"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"MwA2WXrnDpzV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615942002508,"user_tz":0,"elapsed":2531749,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"b21ab277-67c4-457a-d87c-df68760def79"},"source":["EPISODES = 200\n","env = gym.make('CartPole-v0')\n","state_size = env.observation_space.shape[0]\n","action_size = env.action_space.n\n","agent = DQNAgent(state_size, action_size)\n","done = False\n","batch_size = 32\n","\n","for e in range(EPISODES):\n","    state = env.reset()\n","    state = np.reshape(state, [1, state_size])\n","    for time in range(200):\n","        action = agent.act(state)\n","        next_state, reward, done, _ = env.step(action)\n","        next_state = np.reshape(next_state, [1, state_size])\n","        agent.remember(state, action, reward, next_state, done)\n","        state = next_state\n","        if done:\n","            print(\"episode: {}/{}, score: {}, e: {:.2}\"\n","                  .format(e, EPISODES, time, agent.epsilon))\n","            break\n","        if len(agent.memory) > batch_size:\n","            agent.replay(batch_size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["episode: 0/200, score: 28, e: 1.0\n","episode: 1/200, score: 21, e: 0.91\n","episode: 2/200, score: 10, e: 0.87\n","episode: 3/200, score: 54, e: 0.66\n","episode: 4/200, score: 10, e: 0.63\n","episode: 5/200, score: 23, e: 0.56\n","episode: 6/200, score: 12, e: 0.53\n","episode: 7/200, score: 11, e: 0.5\n","episode: 8/200, score: 15, e: 0.46\n","episode: 9/200, score: 9, e: 0.44\n","episode: 10/200, score: 9, e: 0.42\n","episode: 11/200, score: 10, e: 0.4\n","episode: 12/200, score: 14, e: 0.38\n","episode: 13/200, score: 9, e: 0.36\n","episode: 14/200, score: 15, e: 0.33\n","episode: 15/200, score: 8, e: 0.32\n","episode: 16/200, score: 11, e: 0.3\n","episode: 17/200, score: 8, e: 0.29\n","episode: 18/200, score: 9, e: 0.28\n","episode: 19/200, score: 11, e: 0.26\n","episode: 20/200, score: 10, e: 0.25\n","episode: 21/200, score: 11, e: 0.24\n","episode: 22/200, score: 11, e: 0.22\n","episode: 23/200, score: 19, e: 0.2\n","episode: 24/200, score: 11, e: 0.19\n","episode: 25/200, score: 197, e: 0.072\n","episode: 26/200, score: 132, e: 0.037\n","episode: 27/200, score: 180, e: 0.015\n","episode: 28/200, score: 56, e: 0.011\n","episode: 29/200, score: 40, e: 0.01\n","episode: 30/200, score: 33, e: 0.01\n","episode: 31/200, score: 33, e: 0.01\n","episode: 32/200, score: 42, e: 0.01\n","episode: 33/200, score: 37, e: 0.01\n","episode: 34/200, score: 35, e: 0.01\n","episode: 35/200, score: 63, e: 0.01\n","episode: 36/200, score: 27, e: 0.01\n","episode: 37/200, score: 14, e: 0.01\n","episode: 38/200, score: 30, e: 0.01\n","episode: 39/200, score: 15, e: 0.01\n","episode: 40/200, score: 29, e: 0.01\n","episode: 41/200, score: 18, e: 0.01\n","episode: 42/200, score: 16, e: 0.01\n","episode: 43/200, score: 29, e: 0.01\n","episode: 44/200, score: 12, e: 0.01\n","episode: 45/200, score: 24, e: 0.01\n","episode: 46/200, score: 16, e: 0.01\n","episode: 47/200, score: 26, e: 0.01\n","episode: 48/200, score: 88, e: 0.01\n","episode: 49/200, score: 75, e: 0.01\n","episode: 50/200, score: 60, e: 0.01\n","episode: 51/200, score: 58, e: 0.01\n","episode: 52/200, score: 70, e: 0.01\n","episode: 53/200, score: 65, e: 0.01\n","episode: 54/200, score: 67, e: 0.01\n","episode: 55/200, score: 106, e: 0.01\n","episode: 56/200, score: 147, e: 0.01\n","episode: 57/200, score: 146, e: 0.01\n","episode: 58/200, score: 199, e: 0.01\n","episode: 59/200, score: 199, e: 0.01\n","episode: 60/200, score: 199, e: 0.01\n","episode: 61/200, score: 199, e: 0.01\n","episode: 62/200, score: 199, e: 0.01\n","episode: 63/200, score: 199, e: 0.01\n","episode: 64/200, score: 199, e: 0.01\n","episode: 65/200, score: 199, e: 0.01\n","episode: 66/200, score: 199, e: 0.01\n","episode: 67/200, score: 199, e: 0.01\n","episode: 68/200, score: 199, e: 0.01\n","episode: 69/200, score: 199, e: 0.01\n","episode: 70/200, score: 199, e: 0.01\n","episode: 71/200, score: 199, e: 0.01\n","episode: 72/200, score: 199, e: 0.01\n","episode: 73/200, score: 199, e: 0.01\n","episode: 74/200, score: 199, e: 0.01\n","episode: 75/200, score: 199, e: 0.01\n","episode: 76/200, score: 199, e: 0.01\n","episode: 77/200, score: 199, e: 0.01\n","episode: 78/200, score: 199, e: 0.01\n","episode: 79/200, score: 199, e: 0.01\n","episode: 80/200, score: 199, e: 0.01\n","episode: 81/200, score: 199, e: 0.01\n","episode: 82/200, score: 199, e: 0.01\n","episode: 83/200, score: 199, e: 0.01\n","episode: 84/200, score: 199, e: 0.01\n","episode: 85/200, score: 199, e: 0.01\n","episode: 86/200, score: 199, e: 0.01\n","episode: 87/200, score: 199, e: 0.01\n","episode: 88/200, score: 199, e: 0.01\n","episode: 89/200, score: 199, e: 0.01\n","episode: 90/200, score: 199, e: 0.01\n","episode: 91/200, score: 199, e: 0.01\n","episode: 92/200, score: 199, e: 0.01\n","episode: 93/200, score: 199, e: 0.01\n","episode: 94/200, score: 199, e: 0.01\n","episode: 95/200, score: 199, e: 0.01\n","episode: 96/200, score: 199, e: 0.01\n","episode: 97/200, score: 199, e: 0.01\n","episode: 98/200, score: 199, e: 0.01\n","episode: 99/200, score: 199, e: 0.01\n","episode: 100/200, score: 199, e: 0.01\n","episode: 101/200, score: 199, e: 0.01\n","episode: 102/200, score: 199, e: 0.01\n","episode: 103/200, score: 199, e: 0.01\n","episode: 104/200, score: 199, e: 0.01\n","episode: 105/200, score: 199, e: 0.01\n","episode: 106/200, score: 199, e: 0.01\n","episode: 107/200, score: 199, e: 0.01\n","episode: 108/200, score: 199, e: 0.01\n","episode: 109/200, score: 199, e: 0.01\n","episode: 110/200, score: 199, e: 0.01\n","episode: 111/200, score: 199, e: 0.01\n","episode: 112/200, score: 199, e: 0.01\n","episode: 113/200, score: 199, e: 0.01\n","episode: 114/200, score: 199, e: 0.01\n","episode: 115/200, score: 199, e: 0.01\n","episode: 116/200, score: 199, e: 0.01\n","episode: 117/200, score: 199, e: 0.01\n","episode: 118/200, score: 199, e: 0.01\n","episode: 119/200, score: 199, e: 0.01\n","episode: 120/200, score: 199, e: 0.01\n","episode: 121/200, score: 199, e: 0.01\n","episode: 122/200, score: 199, e: 0.01\n","episode: 123/200, score: 199, e: 0.01\n","episode: 124/200, score: 184, e: 0.01\n","episode: 125/200, score: 199, e: 0.01\n","episode: 126/200, score: 199, e: 0.01\n","episode: 127/200, score: 186, e: 0.01\n","episode: 128/200, score: 165, e: 0.01\n","episode: 129/200, score: 151, e: 0.01\n","episode: 130/200, score: 199, e: 0.01\n","episode: 131/200, score: 199, e: 0.01\n","episode: 132/200, score: 128, e: 0.01\n","episode: 133/200, score: 199, e: 0.01\n","episode: 134/200, score: 199, e: 0.01\n","episode: 135/200, score: 199, e: 0.01\n","episode: 136/200, score: 143, e: 0.01\n","episode: 137/200, score: 199, e: 0.01\n","episode: 138/200, score: 199, e: 0.01\n","episode: 139/200, score: 199, e: 0.01\n","episode: 140/200, score: 199, e: 0.01\n","episode: 141/200, score: 178, e: 0.01\n","episode: 142/200, score: 156, e: 0.01\n","episode: 143/200, score: 199, e: 0.01\n","episode: 144/200, score: 199, e: 0.01\n","episode: 145/200, score: 199, e: 0.01\n","episode: 146/200, score: 199, e: 0.01\n","episode: 147/200, score: 199, e: 0.01\n","episode: 148/200, score: 199, e: 0.01\n","episode: 149/200, score: 185, e: 0.01\n","episode: 150/200, score: 199, e: 0.01\n","episode: 151/200, score: 199, e: 0.01\n","episode: 152/200, score: 199, e: 0.01\n","episode: 153/200, score: 199, e: 0.01\n","episode: 154/200, score: 199, e: 0.01\n","episode: 155/200, score: 199, e: 0.01\n","episode: 156/200, score: 150, e: 0.01\n","episode: 157/200, score: 199, e: 0.01\n","episode: 158/200, score: 199, e: 0.01\n","episode: 159/200, score: 199, e: 0.01\n","episode: 160/200, score: 192, e: 0.01\n","episode: 161/200, score: 199, e: 0.01\n","episode: 162/200, score: 199, e: 0.01\n","episode: 163/200, score: 199, e: 0.01\n","episode: 164/200, score: 199, e: 0.01\n","episode: 165/200, score: 199, e: 0.01\n","episode: 166/200, score: 199, e: 0.01\n","episode: 167/200, score: 199, e: 0.01\n","episode: 168/200, score: 134, e: 0.01\n","episode: 169/200, score: 199, e: 0.01\n","episode: 170/200, score: 199, e: 0.01\n","episode: 171/200, score: 176, e: 0.01\n","episode: 172/200, score: 150, e: 0.01\n","episode: 173/200, score: 199, e: 0.01\n","episode: 174/200, score: 110, e: 0.01\n","episode: 175/200, score: 199, e: 0.01\n","episode: 176/200, score: 199, e: 0.01\n","episode: 177/200, score: 199, e: 0.01\n","episode: 178/200, score: 199, e: 0.01\n","episode: 179/200, score: 199, e: 0.01\n","episode: 180/200, score: 199, e: 0.01\n","episode: 181/200, score: 199, e: 0.01\n","episode: 182/200, score: 189, e: 0.01\n","episode: 183/200, score: 165, e: 0.01\n","episode: 184/200, score: 199, e: 0.01\n","episode: 185/200, score: 177, e: 0.01\n","episode: 186/200, score: 180, e: 0.01\n","episode: 187/200, score: 151, e: 0.01\n","episode: 188/200, score: 199, e: 0.01\n","episode: 189/200, score: 199, e: 0.01\n","episode: 190/200, score: 163, e: 0.01\n","episode: 191/200, score: 199, e: 0.01\n","episode: 192/200, score: 199, e: 0.01\n","episode: 193/200, score: 199, e: 0.01\n","episode: 194/200, score: 199, e: 0.01\n","episode: 195/200, score: 136, e: 0.01\n","episode: 196/200, score: 169, e: 0.01\n","episode: 197/200, score: 199, e: 0.01\n","episode: 198/200, score: 199, e: 0.01\n","episode: 199/200, score: 161, e: 0.01\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"W2TqM_HhGVM6"},"source":["Let's now visualize how the agent is performing:"]},{"cell_type":"code","metadata":{"id":"lGglc_BfYam-"},"source":["!apt-get install -y xvfb python-opengl > /dev/null 2>&1\n","!pip install gym pyvirtualdisplay > /dev/null 2>&1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sMUl6WrhYtuj","colab":{"base_uri":"https://localhost:8080/","height":379},"executionInfo":{"status":"error","timestamp":1616017493568,"user_tz":0,"elapsed":1014,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"dab02c87-2a49-4bda-ee49-ba2264a93a9e"},"source":["import gym\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from IPython import display as ipythondisplay\n","from pyvirtualdisplay import Display\n","display = Display(visible=0, size=(400, 300))\n","display.start()\n","from gym.wrappers import Monitor\n","import glob\n","import io\n","import base64"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-ce1c59544391>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mipythondisplay\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpyvirtualdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDisplay\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mdisplay\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvisible\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m400\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyvirtualdisplay'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"WO20MXmfNs4E"},"source":["\"\"\"\n","Utility functions to enable video recording of gym environment and displaying it\n","To enable video, just do \"env = wrap_env(env)\"\"\n","\"\"\"\n","\n","def show_video():\n","  mp4list = glob.glob('video/*.mp4')\n","  if len(mp4list) > 0:\n","    mp4 = mp4list[0]\n","    video = io.open(mp4, 'r+b').read()\n","    encoded = base64.b64encode(video)\n","    ipythondisplay.display(HTML(data='''<video alt=\"test\" autoplay \n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n","             </video>'''.format(encoded.decode('ascii'))))\n","  else: \n","    print(\"Could not find video\")\n","    \n","\n","def wrap_env(env):\n","  env = Monitor(env, './video', force=True)\n","  return env"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tKv6DNBDGY0N","colab":{"base_uri":"https://localhost:8080/","height":438},"outputId":"1d3606a5-8263-4657-d2fc-cfbb35cb6a7e"},"source":["from IPython.display import HTML\n","env = wrap_env(gym.make('CartPole-v1'))\n","state_size = env.observation_space.shape[0]\n","action_size = env.action_space.n\n","done = False\n","state = env.reset()\n","state = np.reshape(state, [1, state_size])\n","for time in range(200):\n","    screen = env.render()\n","    action = agent.exploit(state)\n","    state, reward, done, _ = env.step(action)\n","    if done:\n","      break\n","    state = np.reshape(state, [1, state_size])\n","\n","env.close()\n","show_video()\n","env.reset()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<video alt=\"test\" autoplay \n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n","             </video>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["array([ 0.03279856, -0.01630718, -0.0479847 , -0.02575533])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"wg2wp6Duu7Ok"},"source":["You can have a look of the tutorials and code prepared by [OpenAI](https://spinningup.openai.com/en/latest/user/introduction.html) for further details on RL."]},{"cell_type":"markdown","metadata":{"id":"OWgV2gkTfpCc"},"source":["# Coursework\n","\n","## Task 1: On-policy vs. Off-policy\n","Use the code given below to run the training loop, where the agent is trained for 200 episodes. The agent we give follows a Q-learning approach, which is an off-policy approach. You will now change the approach to SARSA, which is an on-policy approach. Also, for both Q-learning and SARSA test two different policies: $\\epsilon$-greedy and Softmax. $\\epsilon$-greedy is already defined in the tutorial and implemented in the given agent. Softmax policy refers to sampling the next action following the probability distribution given by $Softmax(Q(s, a))$. We provide you the NumPy softmax function to normalize the Q-Values into a probability function to use before sampling. Similarly to RNN, in the softmax function, there is a temperature value involved, we set a default value that works, but you can tweak it if you find another value with better performance. Report the new value if you decide to do so.\n","\n","You will need to modify `act` and `replay` from the `DQNAgent` to implement the different approaches we ask for. Results may differ from run to run due to different initialization states. \n","\n","**Report**\n","* Plot the average reward for the last 50 episodes vs. number of training episodes (train for 200 episodes) for the four agents trained: Q-learning and SARSA with both $\\epsilon$-greedy policy and Softmax policy. Attach in the Appendix the modifications done to `DQNAgent` to implement the different agents. Do not include your code, a simple explanation with the key modifications is enough."]},{"cell_type":"code","metadata":{"id":"A47sXwdmhlrU","executionInfo":{"status":"ok","timestamp":1616960390032,"user_tz":-60,"elapsed":1635,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}}},"source":["import random\n","import gym\n","import numpy as np\n","from collections import deque\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.activations import softmax\n","from keras.optimizers import Adam\n","import os\n","import time\n","import numpy as np\n","\n","def softmax(x, temperature=0.025): \n","    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n","    x = (x - np.expand_dims(np.max(x, 1), 1))\n","    x = x/temperature    \n","    e_x = np.exp(x)\n","    return e_x / (np.expand_dims(e_x.sum(1), -1) + 1e-5)\n","\n","class DQNAgent:\n","  def __init__(self, state_size, action_size):\n","    self.state_size = state_size\n","    self.action_size = action_size\n","    self.memory = deque(maxlen=20000)\n","    self.gamma = 0.95    # discount rate\n","    self.epsilon = 1.0  # exploration rate\n","    self.epsilon_min = 0.01\n","    self.epsilon_decay = 0.995\n","    self.learning_rate = 0.001\n","    self.model = self._build_model()\n","\n","    \n","  def _build_model(self):\n","    # Neural Net for Deep-Q learning Model\n","    model = Sequential()\n","    model.add(Dense(24, input_dim=self.state_size, activation='relu'))\n","    model.add(Dense(48, activation='relu'))\n","    model.add(Dense(self.action_size, activation='linear'))\n","    model.compile(loss='mse',\n","                  optimizer=Adam(lr=self.learning_rate))\n","    return model\n","\n","  def remember(self, state, action, reward, next_state, done):\n","    self.memory.append((state, action, reward, next_state, done))\n","\n","  def act(self, state):\n","    # We implement the epsilon-greedy policy\n","    if np.random.rand() <= self.epsilon:\n","      return random.randrange(self.action_size) #rand action\n","    act_values = self.model.predict(state)\n","    return np.argmax(act_values[0]) # returns action //exploit\n","    # We implement the softmax policy\n","    #act_values = self.model.predict(state)\n","    #prob_func = softmax(act_values)\n","    #return np.argmax(prob_func[0])\n","  def exploit(self, state): # When we test the agent we dont want it to explore anymore, but to exploit what it has learnt\n","    act_values = self.model.predict(state)\n","    return np.argmax(act_values[0]) \n","\n","  def replay(self, batch_size):\n","    minibatch = random.sample(self.memory, batch_size)\n","    \n","    state_b = np.squeeze(np.array(list(map(lambda x: x[0], minibatch))))\n","    action_b = np.squeeze(np.array(list(map(lambda x: x[1], minibatch))))\n","    reward_b = np.squeeze(np.array(list(map(lambda x: x[2], minibatch))))\n","    next_state_b = np.squeeze(np.array(list(map(lambda x: x[3], minibatch))))\n","    done_b = np.squeeze(np.array(list(map(lambda x: x[4], minibatch))))\n","\n","    ### Q-learning\n","    target = (reward_b + self.gamma * np.amax(self.model.predict(next_state_b), 1))\n","    target[done_b==1] = reward_b[done_b==1]\n","    target_f = self.model.predict(state_b)\n","\n","    for k in range(target_f.shape[0]):\n","      target_f[k][action_b[k]] = target[k]\n","    self.model.train_on_batch(state_b, target_f)\n","    if self.epsilon > self.epsilon_min:\n","      self.epsilon *= self.epsilon_decay\n","\n","    ### SARSA\n","    #next_action = agent.act(next_state_b)\n","    #target = reward_b + self.gamma * np.array(self.model.predict(next_state_b))[:,next_action]\n","    #target[done_b==1] = reward_b[done_b==1]\n","    #target_f = self.model.predict(state_b)\n","\n","    #for k in range(target_f.shape[0]):\n","    #  target_f[k][action_b[k]] = target[k]\n","    #self.model.train_on_batch(state_b, target_f)\n","    #if self.epsilon > self.epsilon_min:\n","    #  self.epsilon *= self.epsilon_decay\n","  def load(self, name):\n","    self.model.load_weights(name)\n","  def save(self, name):\n","    self.model.save_weights(name)"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"id":"FiW8Mr6VfvgM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616962566489,"user_tz":-60,"elapsed":2173485,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"dd7380b7-99ac-4c73-df95-abb77dc3a327"},"source":["  import time\n","  EPISODES = 200\n","  env = gym.make('CartPole-v0')\n","  state_size = env.observation_space.shape[0]\n","  action_size = env.action_space.n\n","  agent = DQNAgent(state_size, action_size)\n","  space = []\n","  batch_size = 32\n","  episode_reward_list = deque(maxlen=50)\n","  start = time.time()\n","  for e in range(EPISODES):\n","      state = env.reset()\n","      state = np.reshape(state, [1, state_size])\n","      #action = agent.act(state)\n","      #Uncomment above for SARSA\n","      total_reward = 0\n","      for time in range(200):\n","        action = agent.act(state)\n","        next_state, reward, done, _ = env.step(action)\n","        total_reward += reward\n","        next_state = np.reshape(next_state, [1, state_size])\n","        agent.remember(state, action, reward, next_state, done)\n","        state = next_state\n","        #action = agent.act(state)\n","        #Uncomment above for SARSA\n","        ###\n","        if done:\n","            break\n","        if len(agent.memory) > batch_size:\n","            agent.replay(batch_size)\n","      episode_reward_list.append(total_reward)\n","      episode_reward_avg = np.array(episode_reward_list).mean()\n","      space.append(episode_reward_avg)\n","      print(\"episode: {}/{}, score: {}, e: {:.2}, last 50 ep. avg. rew.: {:.2f}\"\n","                  .format(e, EPISODES, total_reward, agent.epsilon, episode_reward_avg)) "],"execution_count":28,"outputs":[{"output_type":"stream","text":["episode: 0/200, score: 25.0, e: 1.0, last 50 ep. avg. rew.: 25.00\n","episode: 1/200, score: 11.0, e: 0.99, last 50 ep. avg. rew.: 18.00\n","episode: 2/200, score: 37.0, e: 0.82, last 50 ep. avg. rew.: 24.33\n","episode: 3/200, score: 11.0, e: 0.78, last 50 ep. avg. rew.: 21.00\n","episode: 4/200, score: 18.0, e: 0.72, last 50 ep. avg. rew.: 20.40\n","episode: 5/200, score: 18.0, e: 0.66, last 50 ep. avg. rew.: 20.00\n","episode: 6/200, score: 16.0, e: 0.61, last 50 ep. avg. rew.: 19.43\n","episode: 7/200, score: 10.0, e: 0.58, last 50 ep. avg. rew.: 18.25\n","episode: 8/200, score: 10.0, e: 0.56, last 50 ep. avg. rew.: 17.33\n","episode: 9/200, score: 9.0, e: 0.54, last 50 ep. avg. rew.: 16.50\n","episode: 10/200, score: 14.0, e: 0.5, last 50 ep. avg. rew.: 16.27\n","episode: 11/200, score: 11.0, e: 0.48, last 50 ep. avg. rew.: 15.83\n","episode: 12/200, score: 15.0, e: 0.45, last 50 ep. avg. rew.: 15.77\n","episode: 13/200, score: 11.0, e: 0.42, last 50 ep. avg. rew.: 15.43\n","episode: 14/200, score: 10.0, e: 0.41, last 50 ep. avg. rew.: 15.07\n","episode: 15/200, score: 10.0, e: 0.39, last 50 ep. avg. rew.: 14.75\n","episode: 16/200, score: 13.0, e: 0.37, last 50 ep. avg. rew.: 14.65\n","episode: 17/200, score: 13.0, e: 0.34, last 50 ep. avg. rew.: 14.56\n","episode: 18/200, score: 10.0, e: 0.33, last 50 ep. avg. rew.: 14.32\n","episode: 19/200, score: 16.0, e: 0.3, last 50 ep. avg. rew.: 14.40\n","episode: 20/200, score: 13.0, e: 0.29, last 50 ep. avg. rew.: 14.33\n","episode: 21/200, score: 14.0, e: 0.27, last 50 ep. avg. rew.: 14.32\n","episode: 22/200, score: 12.0, e: 0.25, last 50 ep. avg. rew.: 14.22\n","episode: 23/200, score: 11.0, e: 0.24, last 50 ep. avg. rew.: 14.08\n","episode: 24/200, score: 12.0, e: 0.23, last 50 ep. avg. rew.: 14.00\n","episode: 25/200, score: 14.0, e: 0.21, last 50 ep. avg. rew.: 14.00\n","episode: 26/200, score: 14.0, e: 0.2, last 50 ep. avg. rew.: 14.00\n","episode: 27/200, score: 14.0, e: 0.19, last 50 ep. avg. rew.: 14.00\n","episode: 28/200, score: 9.0, e: 0.18, last 50 ep. avg. rew.: 13.83\n","episode: 29/200, score: 9.0, e: 0.17, last 50 ep. avg. rew.: 13.67\n","episode: 30/200, score: 10.0, e: 0.17, last 50 ep. avg. rew.: 13.55\n","episode: 31/200, score: 11.0, e: 0.16, last 50 ep. avg. rew.: 13.47\n","episode: 32/200, score: 9.0, e: 0.15, last 50 ep. avg. rew.: 13.33\n","episode: 33/200, score: 11.0, e: 0.14, last 50 ep. avg. rew.: 13.26\n","episode: 34/200, score: 15.0, e: 0.13, last 50 ep. avg. rew.: 13.31\n","episode: 35/200, score: 42.0, e: 0.11, last 50 ep. avg. rew.: 14.11\n","episode: 36/200, score: 20.0, e: 0.1, last 50 ep. avg. rew.: 14.27\n","episode: 37/200, score: 84.0, e: 0.066, last 50 ep. avg. rew.: 16.11\n","episode: 38/200, score: 56.0, e: 0.05, last 50 ep. avg. rew.: 17.13\n","episode: 39/200, score: 92.0, e: 0.032, last 50 ep. avg. rew.: 19.00\n","episode: 40/200, score: 38.0, e: 0.026, last 50 ep. avg. rew.: 19.46\n","episode: 41/200, score: 80.0, e: 0.018, last 50 ep. avg. rew.: 20.90\n","episode: 42/200, score: 56.0, e: 0.013, last 50 ep. avg. rew.: 21.72\n","episode: 43/200, score: 21.0, e: 0.012, last 50 ep. avg. rew.: 21.70\n","episode: 44/200, score: 25.0, e: 0.011, last 50 ep. avg. rew.: 21.78\n","episode: 45/200, score: 50.0, e: 0.01, last 50 ep. avg. rew.: 22.39\n","episode: 46/200, score: 40.0, e: 0.01, last 50 ep. avg. rew.: 22.77\n","episode: 47/200, score: 37.0, e: 0.01, last 50 ep. avg. rew.: 23.06\n","episode: 48/200, score: 34.0, e: 0.01, last 50 ep. avg. rew.: 23.29\n","episode: 49/200, score: 65.0, e: 0.01, last 50 ep. avg. rew.: 24.12\n","episode: 50/200, score: 177.0, e: 0.01, last 50 ep. avg. rew.: 27.16\n","episode: 51/200, score: 85.0, e: 0.01, last 50 ep. avg. rew.: 28.64\n","episode: 52/200, score: 72.0, e: 0.01, last 50 ep. avg. rew.: 29.34\n","episode: 53/200, score: 51.0, e: 0.01, last 50 ep. avg. rew.: 30.14\n","episode: 54/200, score: 62.0, e: 0.01, last 50 ep. avg. rew.: 31.02\n","episode: 55/200, score: 109.0, e: 0.01, last 50 ep. avg. rew.: 32.84\n","episode: 56/200, score: 88.0, e: 0.01, last 50 ep. avg. rew.: 34.28\n","episode: 57/200, score: 74.0, e: 0.01, last 50 ep. avg. rew.: 35.56\n","episode: 58/200, score: 192.0, e: 0.01, last 50 ep. avg. rew.: 39.20\n","episode: 59/200, score: 99.0, e: 0.01, last 50 ep. avg. rew.: 41.00\n","episode: 60/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 44.72\n","episode: 61/200, score: 139.0, e: 0.01, last 50 ep. avg. rew.: 47.28\n","episode: 62/200, score: 142.0, e: 0.01, last 50 ep. avg. rew.: 49.82\n","episode: 63/200, score: 145.0, e: 0.01, last 50 ep. avg. rew.: 52.50\n","episode: 64/200, score: 162.0, e: 0.01, last 50 ep. avg. rew.: 55.54\n","episode: 65/200, score: 175.0, e: 0.01, last 50 ep. avg. rew.: 58.84\n","episode: 66/200, score: 132.0, e: 0.01, last 50 ep. avg. rew.: 61.22\n","episode: 67/200, score: 129.0, e: 0.01, last 50 ep. avg. rew.: 63.54\n","episode: 68/200, score: 164.0, e: 0.01, last 50 ep. avg. rew.: 66.62\n","episode: 69/200, score: 154.0, e: 0.01, last 50 ep. avg. rew.: 69.38\n","episode: 70/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 73.12\n","episode: 71/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 76.84\n","episode: 72/200, score: 189.0, e: 0.01, last 50 ep. avg. rew.: 80.38\n","episode: 73/200, score: 150.0, e: 0.01, last 50 ep. avg. rew.: 83.16\n","episode: 74/200, score: 153.0, e: 0.01, last 50 ep. avg. rew.: 85.98\n","episode: 75/200, score: 177.0, e: 0.01, last 50 ep. avg. rew.: 89.24\n","episode: 76/200, score: 178.0, e: 0.01, last 50 ep. avg. rew.: 92.52\n","episode: 77/200, score: 165.0, e: 0.01, last 50 ep. avg. rew.: 95.54\n","episode: 78/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 99.36\n","episode: 79/200, score: 174.0, e: 0.01, last 50 ep. avg. rew.: 102.66\n","episode: 80/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 106.46\n","episode: 81/200, score: 155.0, e: 0.01, last 50 ep. avg. rew.: 109.34\n","episode: 82/200, score: 181.0, e: 0.01, last 50 ep. avg. rew.: 112.78\n","episode: 83/200, score: 162.0, e: 0.01, last 50 ep. avg. rew.: 115.80\n","episode: 84/200, score: 164.0, e: 0.01, last 50 ep. avg. rew.: 118.78\n","episode: 85/200, score: 167.0, e: 0.01, last 50 ep. avg. rew.: 121.28\n","episode: 86/200, score: 194.0, e: 0.01, last 50 ep. avg. rew.: 124.76\n","episode: 87/200, score: 164.0, e: 0.01, last 50 ep. avg. rew.: 126.36\n","episode: 88/200, score: 171.0, e: 0.01, last 50 ep. avg. rew.: 128.66\n","episode: 89/200, score: 163.0, e: 0.01, last 50 ep. avg. rew.: 130.08\n","episode: 90/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 133.32\n","episode: 91/200, score: 170.0, e: 0.01, last 50 ep. avg. rew.: 135.12\n","episode: 92/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 138.00\n","episode: 93/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 141.58\n","episode: 94/200, score: 168.0, e: 0.01, last 50 ep. avg. rew.: 144.44\n","episode: 95/200, score: 154.0, e: 0.01, last 50 ep. avg. rew.: 146.52\n","episode: 96/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 149.72\n","episode: 97/200, score: 178.0, e: 0.01, last 50 ep. avg. rew.: 152.54\n","episode: 98/200, score: 185.0, e: 0.01, last 50 ep. avg. rew.: 155.56\n","episode: 99/200, score: 182.0, e: 0.01, last 50 ep. avg. rew.: 157.90\n","episode: 100/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 158.36\n","episode: 101/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 160.66\n","episode: 102/200, score: 142.0, e: 0.01, last 50 ep. avg. rew.: 162.06\n","episode: 103/200, score: 160.0, e: 0.01, last 50 ep. avg. rew.: 164.24\n","episode: 104/200, score: 175.0, e: 0.01, last 50 ep. avg. rew.: 166.50\n","episode: 105/200, score: 141.0, e: 0.01, last 50 ep. avg. rew.: 167.14\n","episode: 106/200, score: 155.0, e: 0.01, last 50 ep. avg. rew.: 168.48\n","episode: 107/200, score: 145.0, e: 0.01, last 50 ep. avg. rew.: 169.90\n","episode: 108/200, score: 144.0, e: 0.01, last 50 ep. avg. rew.: 168.94\n","episode: 109/200, score: 173.0, e: 0.01, last 50 ep. avg. rew.: 170.42\n","episode: 110/200, score: 156.0, e: 0.01, last 50 ep. avg. rew.: 169.54\n","episode: 111/200, score: 138.0, e: 0.01, last 50 ep. avg. rew.: 169.52\n","episode: 112/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 170.68\n","episode: 113/200, score: 190.0, e: 0.01, last 50 ep. avg. rew.: 171.58\n","episode: 114/200, score: 191.0, e: 0.01, last 50 ep. avg. rew.: 172.16\n","episode: 115/200, score: 162.0, e: 0.01, last 50 ep. avg. rew.: 171.90\n","episode: 116/200, score: 155.0, e: 0.01, last 50 ep. avg. rew.: 172.36\n","episode: 117/200, score: 168.0, e: 0.01, last 50 ep. avg. rew.: 173.14\n","episode: 118/200, score: 166.0, e: 0.01, last 50 ep. avg. rew.: 173.18\n","episode: 119/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 174.10\n","episode: 120/200, score: 151.0, e: 0.01, last 50 ep. avg. rew.: 173.12\n","episode: 121/200, score: 154.0, e: 0.01, last 50 ep. avg. rew.: 172.20\n","episode: 122/200, score: 162.0, e: 0.01, last 50 ep. avg. rew.: 171.66\n","episode: 123/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 172.66\n","episode: 124/200, score: 139.0, e: 0.01, last 50 ep. avg. rew.: 172.38\n","episode: 125/200, score: 176.0, e: 0.01, last 50 ep. avg. rew.: 172.36\n","episode: 126/200, score: 148.0, e: 0.01, last 50 ep. avg. rew.: 171.76\n","episode: 127/200, score: 196.0, e: 0.01, last 50 ep. avg. rew.: 172.38\n","episode: 128/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 172.38\n","episode: 129/200, score: 126.0, e: 0.01, last 50 ep. avg. rew.: 171.42\n","episode: 130/200, score: 138.0, e: 0.01, last 50 ep. avg. rew.: 170.18\n","episode: 131/200, score: 149.0, e: 0.01, last 50 ep. avg. rew.: 170.06\n","episode: 132/200, score: 132.0, e: 0.01, last 50 ep. avg. rew.: 169.08\n","episode: 133/200, score: 187.0, e: 0.01, last 50 ep. avg. rew.: 169.58\n","episode: 134/200, score: 141.0, e: 0.01, last 50 ep. avg. rew.: 169.12\n","episode: 135/200, score: 185.0, e: 0.01, last 50 ep. avg. rew.: 169.48\n","episode: 136/200, score: 156.0, e: 0.01, last 50 ep. avg. rew.: 168.72\n","episode: 137/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 169.44\n","episode: 138/200, score: 135.0, e: 0.01, last 50 ep. avg. rew.: 168.72\n","episode: 139/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 169.46\n","episode: 140/200, score: 141.0, e: 0.01, last 50 ep. avg. rew.: 168.28\n","episode: 141/200, score: 151.0, e: 0.01, last 50 ep. avg. rew.: 167.90\n","episode: 142/200, score: 135.0, e: 0.01, last 50 ep. avg. rew.: 166.60\n","episode: 143/200, score: 181.0, e: 0.01, last 50 ep. avg. rew.: 166.22\n","episode: 144/200, score: 172.0, e: 0.01, last 50 ep. avg. rew.: 166.30\n","episode: 145/200, score: 134.0, e: 0.01, last 50 ep. avg. rew.: 165.90\n","episode: 146/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 165.90\n","episode: 147/200, score: 187.0, e: 0.01, last 50 ep. avg. rew.: 166.08\n","episode: 148/200, score: 194.0, e: 0.01, last 50 ep. avg. rew.: 166.26\n","episode: 149/200, score: 197.0, e: 0.01, last 50 ep. avg. rew.: 166.56\n","episode: 150/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 166.56\n","episode: 151/200, score: 155.0, e: 0.01, last 50 ep. avg. rew.: 165.66\n","episode: 152/200, score: 165.0, e: 0.01, last 50 ep. avg. rew.: 166.12\n","episode: 153/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 166.92\n","episode: 154/200, score: 142.0, e: 0.01, last 50 ep. avg. rew.: 166.26\n","episode: 155/200, score: 178.0, e: 0.01, last 50 ep. avg. rew.: 167.00\n","episode: 156/200, score: 139.0, e: 0.01, last 50 ep. avg. rew.: 166.68\n","episode: 157/200, score: 199.0, e: 0.01, last 50 ep. avg. rew.: 167.76\n","episode: 158/200, score: 190.0, e: 0.01, last 50 ep. avg. rew.: 168.68\n","episode: 159/200, score: 162.0, e: 0.01, last 50 ep. avg. rew.: 168.46\n","episode: 160/200, score: 137.0, e: 0.01, last 50 ep. avg. rew.: 168.08\n","episode: 161/200, score: 147.0, e: 0.01, last 50 ep. avg. rew.: 168.26\n","episode: 162/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 168.26\n","episode: 163/200, score: 138.0, e: 0.01, last 50 ep. avg. rew.: 167.22\n","episode: 164/200, score: 148.0, e: 0.01, last 50 ep. avg. rew.: 166.36\n","episode: 165/200, score: 165.0, e: 0.01, last 50 ep. avg. rew.: 166.42\n","episode: 166/200, score: 127.0, e: 0.01, last 50 ep. avg. rew.: 165.86\n","episode: 167/200, score: 200.0, e: 0.01, last 50 ep. avg. rew.: 166.50\n","episode: 168/200, score: 175.0, e: 0.01, last 50 ep. avg. rew.: 166.68\n","episode: 169/200, score: 135.0, e: 0.01, last 50 ep. avg. rew.: 165.38\n","episode: 170/200, score: 198.0, e: 0.01, last 50 ep. avg. rew.: 166.32\n","episode: 171/200, score: 170.0, e: 0.01, last 50 ep. avg. rew.: 166.64\n","episode: 172/200, score: 137.0, e: 0.01, last 50 ep. avg. rew.: 166.14\n","episode: 173/200, score: 154.0, e: 0.01, last 50 ep. avg. rew.: 165.22\n","episode: 174/200, score: 156.0, e: 0.01, last 50 ep. avg. rew.: 165.56\n","episode: 175/200, score: 169.0, e: 0.01, last 50 ep. avg. rew.: 165.42\n","episode: 176/200, score: 151.0, e: 0.01, last 50 ep. avg. rew.: 165.48\n","episode: 177/200, score: 143.0, e: 0.01, last 50 ep. avg. rew.: 164.42\n","episode: 178/200, score: 170.0, e: 0.01, last 50 ep. avg. rew.: 163.82\n","episode: 179/200, score: 146.0, e: 0.01, last 50 ep. avg. rew.: 164.22\n","episode: 180/200, score: 158.0, e: 0.01, last 50 ep. avg. rew.: 164.62\n","episode: 181/200, score: 175.0, e: 0.01, last 50 ep. avg. rew.: 165.14\n","episode: 182/200, score: 189.0, e: 0.01, last 50 ep. avg. rew.: 166.28\n","episode: 183/200, score: 127.0, e: 0.01, last 50 ep. avg. rew.: 165.08\n","episode: 184/200, score: 149.0, e: 0.01, last 50 ep. avg. rew.: 165.24\n","episode: 185/200, score: 147.0, e: 0.01, last 50 ep. avg. rew.: 164.48\n","episode: 186/200, score: 177.0, e: 0.01, last 50 ep. avg. rew.: 164.90\n","episode: 187/200, score: 126.0, e: 0.01, last 50 ep. avg. rew.: 163.42\n","episode: 188/200, score: 104.0, e: 0.01, last 50 ep. avg. rew.: 162.80\n","episode: 189/200, score: 107.0, e: 0.01, last 50 ep. avg. rew.: 160.94\n","episode: 190/200, score: 164.0, e: 0.01, last 50 ep. avg. rew.: 161.40\n","episode: 191/200, score: 138.0, e: 0.01, last 50 ep. avg. rew.: 161.14\n","episode: 192/200, score: 177.0, e: 0.01, last 50 ep. avg. rew.: 161.98\n","episode: 193/200, score: 130.0, e: 0.01, last 50 ep. avg. rew.: 160.96\n","episode: 194/200, score: 112.0, e: 0.01, last 50 ep. avg. rew.: 159.76\n","episode: 195/200, score: 123.0, e: 0.01, last 50 ep. avg. rew.: 159.54\n","episode: 196/200, score: 141.0, e: 0.01, last 50 ep. avg. rew.: 158.36\n","episode: 197/200, score: 26.0, e: 0.01, last 50 ep. avg. rew.: 155.14\n","episode: 198/200, score: 166.0, e: 0.01, last 50 ep. avg. rew.: 154.58\n","episode: 199/200, score: 68.0, e: 0.01, last 50 ep. avg. rew.: 152.00\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"z-PgPjlTD2UD","executionInfo":{"status":"ok","timestamp":1617040113823,"user_tz":-60,"elapsed":821,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}}},"source":["import matplotlib.pyplot as plt\n","l = []\n","for i in range (200):\n","  l.append(i)"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"oxeFgO14Yk5H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616962566491,"user_tz":-60,"elapsed":2169154,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"0fa5f738-f0c3-4a00-9bff-37f5437e543b"},"source":["import time\n","end = time.time()\n","print(\"time elapsed: {0}\".format(end-start) )  "],"execution_count":30,"outputs":[{"output_type":"stream","text":["time elapsed: 2172.5563061237335\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Q1wgDAv0BRP8","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1616963038915,"user_tz":-60,"elapsed":696,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"b3f00704-ba7d-4c97-ee75-8d3eca550ace"},"source":["plt.plot(l, space,label='SARSA,T=0.025', color='red')\n","plt.title('Softmax poor performance example', fontsize=14)\n","plt.xlabel('number of training episodes', fontsize=14)\n","plt.ylabel('Ave Reward for last 50 episodes', fontsize=14)\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"execution_count":31,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"h9yE_rUCFGCR","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1616954958508,"user_tz":-60,"elapsed":1270,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"47c74f23-03be-45d0-fce0-b436ec1c9b41"},"source":["plt.plot(l, space,label='train', color='red')\n","plt.title('Effect of #of FC layers on network performance', fontsize=14)\n","plt.xlabel('K', fontsize=14)\n","plt.ylabel('Accuracy Score', fontsize=14)\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"iBOqIQN7Pxme","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1616954958509,"user_tz":-60,"elapsed":1262,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"f6bbf9da-38d8-4e10-aa1c-679dbf7ebb76"},"source":["from google.colab import files\n","import pickle\n","with open('SARSAq.txt', 'wb') as f:\n","  pickle.dump(space, f)\n","\n","files.download('SARSAq.txt')"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_f8bff958-14a1-4d39-a57c-702c4c3f9df7\", \"SARSAq.txt\", 5554)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"QMvbkDEnqfnx","colab":{"base_uri":"https://localhost:8080/","height":243},"executionInfo":{"status":"error","timestamp":1617040127189,"user_tz":-60,"elapsed":436,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"9cd188ba-2afb-4c81-b936-7b86c24b5831"},"source":["from google.colab import files\n","import pickle\n","with open('Soft21.000.txt', 'wb') as f:\n","  pickle.dump(space, f)\n","\n","files.download('Soft21.000.txt')"],"execution_count":3,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-7924119510cd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Soft21.000.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Soft21.000.txt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'space' is not defined"]}]},{"cell_type":"code","metadata":{"id":"RlrW6F2msExd","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1616026579303,"user_tz":0,"elapsed":473,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"9420be85-25c4-47d7-b64b-cb1f03dd877a"},"source":["from google.colab import files\n","import pickle\n","with open('Softmax0.050.txt', 'wb') as f:\n","  pickle.dump(space, f)\n","\n","files.download('Softmax0.050.txt')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_0d68099c-cd04-4ee8-8cb6-6188f241acd9\", \"Softmax0.050.txt\", 5554)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"58Z4MTEQQKJo"},"source":["with open ('Softmax0.015.txt', 'rb') as fp1:\n","    p1 = pickle.load(fp1)\n","with open ('Softmax0.025.txt', 'rb') as fp2:\n","    p2 = pickle.load(fp2)\n","with open ('Softmax1.000.txt', 'rb') as fp3:\n","    p3 = pickle.load(fp3)\n","with open ('Softmanx2.000.txt', 'rb') as fp4:\n","    p4 = pickle.load(fp4)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"6xn4CX70GXBf","executionInfo":{"status":"ok","timestamp":1617040734848,"user_tz":-60,"elapsed":965,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"df9e1494-c12c-4b8c-998d-17c585db2ba9"},"source":["with open ('SARSAqlearn.txt', 'rb') as fp1:\n","    p1 = pickle.load(fp1)\n","with open ('SARSAq.txt', 'rb') as fp2:\n","    p2 = pickle.load(fp2)\n","plt.plot(l, p1,label='SARSA ε-Greedy run1')\n","plt.plot(l, p2,label='SARSA ε-Greedy run2')\n","plt.title('Comparison of same policy and agents', fontsize=14)\n","plt.xlabel('number of training episodes', fontsize=14)\n","plt.ylabel('Ave Reward for last 50 episodes', fontsize=14)\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"hSO_Zrgm7DCQ","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1616097664375,"user_tz":0,"elapsed":499,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"cbbc7409-db11-47e4-ca75-aeda6b990643"},"source":["plt.plot(l, p3,label='T=0.025', color='blue')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f0eb01f5510>]"]},"metadata":{"tags":[]},"execution_count":38},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"5uzJvejbrBD7","colab":{"base_uri":"https://localhost:8080/","height":239},"executionInfo":{"status":"error","timestamp":1616097295416,"user_tz":0,"elapsed":476,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"5fdc9e02-3cff-4140-ee2c-a21248af1d56"},"source":["plt.plot(l, space,label='T=0.015')\n","plt.plot(l, p1,label='T=0.050', color='red')\n","plt.plot(l, p2,label='T=0.025', color='blue')\n","plt.plot(l, p3,label='T=1.000', color='g')\n","plt.title('Effect of #of FC layers on network performance', fontsize=14)\n","plt.xlabel('K', fontsize=14)\n","plt.ylabel('Accuracy Score', fontsize=14)\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-b12935e8c6b9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mspace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'T=0.015'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'T=0.050'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'T=0.025'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'T=1.000'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'g'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Effect of #of FC layers on network performance'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'space' is not defined"]}]},{"cell_type":"code","metadata":{"id":"braNpF4IpQas","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1616963085862,"user_tz":-60,"elapsed":1043,"user":{"displayName":"w kel","photoUrl":"","userId":"01193867237643704494"}},"outputId":"906411ae-4737-4292-cc40-3d4c43a2a1a8"},"source":["from google.colab import files\n","import pickle\n","import matplotlib.pyplot as plt\n","with open ('QGreedy.txt', 'rb') as fp1:\n","    p1 = pickle.load(fp1)\n","with open ('Softmax0.025.txt', 'rb') as fp2:\n","    p2 = pickle.load(fp2)\n","with open ('SARSAq.txt', 'rb') as fp3:\n","    p3 = pickle.load(fp3)\n","with open ('SARSAsoftmax0.025.txt', 'rb') as fp4:\n","    p4 = pickle.load(fp4)\n","plt.plot(l, space,label='Q learning ε-Greedy', color='blue')\n","plt.plot(l, p2,label='Q learning softmax', color='blue', linestyle = 'dashed')\n","plt.plot(l, p3,label='SARSA ε-Greedy', color = 'orange')\n","plt.plot(l, p4,label='SARSA softmax', color = 'orange', linestyle = 'dashed')\n","plt.title('Comparison of different policy and agents', fontsize=14)\n","plt.xlabel('number of training episodes', fontsize=14)\n","plt.ylabel('Ave Reward for last 50 episodes', fontsize=14)\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"execution_count":32,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}